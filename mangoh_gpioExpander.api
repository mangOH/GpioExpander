//--------------------------------------------------------------------------------------------------
/**
 * @page c_gpio Gpio Definitions
 *
 * @ref le_gpio_interface.h "API Reference"
 *
 * <HR>
 *
 * The GPIO API is used by apps to control gpio Input/Output.
 *
 * GPIO BSP service.
 *
 * This file defines GPIO API control definitions.
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
/**
 * @file le_gpio_interface.h
 *
 * Legato @ref c_gpio include file.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//-------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Reference to a GPIO iterator object.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Gpio;

// TODO: It's not a good idea to have the GPIO identity be encoded in the GPIO expander app because
//       it prevents it from being reusable.

//--------------------------------------------------------------------------------------------------
/**
 * The pin IO definition of GPIO Expander1: IC U903.
 */
//--------------------------------------------------------------------------------------------------
DEFINE PIN_ARDUINO_RESET_LEVEL =  0; // I/O  0: ARDUINO
DEFINE PIN_BATTCHRGR_PG_N      =  1; // I/O  1: BATTERY CHARGER
DEFINE PIN_BATTGAUGE_GPIO      =  2; // I/O  2: BATTERY CHARGER
DEFINE PIN_LED_ON              =  3; // I/O  3: LED
DEFINE PIN_ATMEGA_RESET_GPIO   =  4; // I/O  4: ARDUINO
DEFINE PIN_CONNECT_TO_AV_LED   =  5; // I/O  5: AV CONNECTIVITY
DEFINE PIN_PCM_ANALOG_SELECT   =  6; // I/O  6: AUDIO
DEFINE PIN_CONNECT_TO_AV       =  7; // I/O  7: AV CONNECTIVITY
DEFINE PIN_BOARD_REV_RES1      =  8; // I/O  8: BOARD BOOT UP
DEFINE PIN_BOARD_REV_RES2      =  9; // I/O  9: BOARD BOOT UP
DEFINE PIN_UART_EXP1_ENN       = 10; // I/O 10: IOT0,1
DEFINE PIN_UART_EXP1_IN        = 11; // I/O 11: IOT0,1
DEFINE PIN_UART_EXP2_IN        = 12; // I/O 12: IOT2, CONSOLE
DEFINE PIN_SDIO_SEL            = 13; // I/O 13: SD CARD/IOT0
DEFINE PIN_SPI_EXP1_ENN        = 14; // I/O 14: IOT0,1
DEFINE PIN_SPI_EXP1_IN         = 15; // I/O 15: IOT0,1

//--------------------------------------------------------------------------------------------------
/**
 * The pin IO definition of GPIO Expander2: IC U906.
 */
//--------------------------------------------------------------------------------------------------
DEFINE PIN_GPIOEXP_INT1          = 16; // I/O  0: TODO: Is this label correct?
DEFINE PIN_BATTERY_DETECT        = 17; // I/O  1:
DEFINE PIN_GPIO_SCF3_RESET       = 18; // I/O  2:
DEFINE PIN_LED_CARD_DETECT_IOT0  = 19; // I/O  3:
DEFINE PIN_LED_CARD_DETECT_IOT1  = 20; // I/O  4:
DEFINE PIN_LED_CARD_DETECT_IOT2  = 21; // I/O  5:
DEFINE PIN_UIM2_PWM_SELECT       = 22; // I/O  6:
DEFINE PIN_UIM2_M2_S_SELECT      = 23; // I/O  7:
DEFINE PIN_TP900                 = 24; // I/O  8:
DEFINE PIN_SENSOR_INT1           = 25; // I/O  9: Accelerometer/gyro
DEFINE PIN_SENSOR_INT2           = 26; // I/O 10: Accelerometer/gyro
DEFINE PIN_CARD_DETECT_IOT0      = 27; // I/O 11: IOT0
DEFINE PIN_CARD_DETECT_IOT2      = 28; // I/O 12: IOT2
DEFINE PIN_CARD_DETECT_IOT1      = 29; // I/O 13: IOT1
DEFINE PIN_GPIOEXP_INT3          = 30; // I/O 14:
DEFINE PIN_BATTCHGR_INT_N        = 31; // I/O 15:

//--------------------------------------------------------------------------------------------------
/**
 * The pin IO definition of GPIO Expander3: IC U909.
 */
//--------------------------------------------------------------------------------------------------
DEFINE PIN_USB_HUB_INTN        = 32; // I/O  0: USB Hub Int
DEFINE PIN_HUB_CONNECT         = 33; // I/O  1: Hub Connect
DEFINE PIN_GPIO_IOT2_RESET     = 34; // I/O  2: IOT2 reset
DEFINE PIN_GPIO_IOT1_RESET     = 35; // I/O  3: IOT1 reset
DEFINE PIN_GPIO_IOT0_RESET     = 36; // I/O  4: IOT0 reset
DEFINE PIN_TP901               = 37; // I/O  5:
DEFINE PIN_TP902               = 38; // I/O  6:
DEFINE PIN_TP903               = 39; // I/O  7:
DEFINE PIN_UART_EXP2_ENN       = 40; // I/O  8: IOT2 Console
DEFINE PIN_PCM_EXP1_ENN        = 41; // I/O  9: Onboard codec/IOT0 codec
DEFINE PIN_PCM_EXP1_SEL        = 42; // I/O 10: Onboard codec/IOT0 codec
DEFINE PIN_ARD_FTDI            = 43; // I/O 11: Arduino
DEFINE PIN_TP904               = 44; // I/O 12:
DEFINE PIN_TP905               = 45; // I/O 13:
DEFINE PIN_TP906               = 46; // I/O 14:
DEFINE PIN_RS232_ENABLE        = 47; // I/O 15: RS232

//--------------------------------------------------------------------------------------------------
/**
 * When using GPIO pins we first need to specify in which mode we'd like to use it.
 * There are three modes into which a pin can be set.
 *
 * The type of GPIO pin mode,  Input, Output.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM PinMode
{
    PIN_MODE_OUTPUT,     ///< GPIO direction output mode, Assign a pin its value
    PIN_MODE_INPUT,      ///< GPIO direction input mode, Poll a pin to get its value
};

//--------------------------------------------------------------------------------------------------
/**
 * GPIO level - may be high or low
 */
//--------------------------------------------------------------------------------------------------
ENUM Level
{
    LEVEL_LOW,     ///< GPIO level low
    LEVEL_HIGH     ///< GPIO level high
};

//--------------------------------------------------------------------------------------------------
/**
 * Polarity inversion options for GPIO.
 */
//--------------------------------------------------------------------------------------------------
ENUM Polarity
{
    POLARITY_NORMAL,     ///< GPIO polarity normal
    POLARITY_INVERTED    ///< GPIO polarity inverted
};

//--------------------------------------------------------------------------------------------------
/**
 * The type of GPIO pullup, pulldown.
 *
 * PULLUPDOWN_TYPE_OFF:  pullup disable and pulldown disable
 * PULLUPDOWN_TYPE_DOWN: pullup disable and pulldown enable
 * PULLUPDOWN_TYPE_UP:   pullup enable and pulldown disable
 */
//--------------------------------------------------------------------------------------------------
ENUM PullUpDownType
{
    PULLUPDOWN_TYPE_OFF,   ///< GPIO both pullup and pulldown disable
    PULLUPDOWN_TYPE_DOWN,  ///< GPIO pulldown
    PULLUPDOWN_TYPE_UP     ///< GPIO pullup
};

//--------------------------------------------------------------------------------------------------
/**
 * The mode of GPIO Edge Sensitivity.
 */
//--------------------------------------------------------------------------------------------------
ENUM EdgeSensitivityMode
{
    EDGE_SENSE_NONE,      ///< None
    EDGE_SENSE_RISING,    ///< Rising
    EDGE_SENSE_FALLING,   ///< Faling
    EDGE_SENSE_BOTH       ///< Both
};

//--------------------------------------------------------------------------------------------------
/**
 * The operation of GPIO open drain
 */
//--------------------------------------------------------------------------------------------------
ENUM OpenDrainOperation
{
    PUSH_PULL_OP,         ///< Regular push-pull operaion.
    OPEN_DRAIN_OP         ///< Open drain operation.
};

//--------------------------------------------------------------------------------------------------
/**
 * Setup GPIO Direction INPUT or OUTPUT mode.
 *
 * @return LE_FAULT       Function failed to setup direction mode.
 * @return LE_OK          Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetDirectionMode
(
    int gpioExpanderPinDefine IN, ///< GPIO to set direction on
    PinMode mode              IN  ///< GPIO direction input/output mode
);

//--------------------------------------------------------------------------------------------------
/**
 * Setup GPIO pullup/pulldown.
 *
 * @return LE_FAULT       Function failed to setup pull up or pull down.
 * @return LE_OK          Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPullUpDown
(
    int gpioExpanderPinDefine IN, ///< GPIO to set pull direction on
    PullUpDownType pud        IN  ///< The type of pullup, pulldown, off
);

//--------------------------------------------------------------------------------------------------
/**
 * Setup GPIO OpenDrain.
 *
 * Enables open drain operation for each output-configured IO.
 *
 * Output pins can be driven in two different modes:
 * - Regular push-pull operation: A transistor connects to high, and a transistor connects to low
 *   (only one is operated at a time)
 * - Open drain operation:  A transistor connects to low and nothing else
 *
 * @return LE_FAULT       Function failed to setup open drain.
 * @return LE_OK          Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetOpenDrain
(
    int gpioExpanderPinDefine IN, ///< GPIO to control open drain setting on
    OpenDrainOperation drain  IN  ///< The operation of GPIO open drain
);

//--------------------------------------------------------------------------------------------------
/**
 * Setup GPIO Polarity.
 *
 * @return LE_FAULT       Function failed to setup polarity.
 * @return LE_OK          Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPolarity
(
    int gpioExpanderPinDefine IN,  ///< GPIO to set polarity on
    Polarity polarity         IN   ///< Normal or inverted
);

//--------------------------------------------------------------------------------------------------
/**
 * Write value to GPIO output mode, low or high.
 *
 * @return LE_FAULT       Function failed to setup output mode.
 * @return LE_OK          Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Output
(
    int gpioExpanderPinDefine IN, ///< GPIO to set output value for
    Level level               IN  ///< Output low or high
);

//--------------------------------------------------------------------------------------------------
/**
 * Read value from GPIO input.
 *
 * @return
 *      - A mangoh_gpioExpander_Level_t value
 *      - LE_FAULT
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int Input
(
    int gpioExpanderPinDefine IN  ///< GPIO to get input value for
);

//--------------------------------------------------------------------------------------------------
/**
 * Rising or Falling of Edge sensitivity.
 *
 * @return LE_FAULT       Function failed to setup edge sense.
 * @return LE_OK          Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetEdgeSense
(
    int gpioExpanderPinDefine IN, ///< GPIO to set edge sensitivity for
    EdgeSensitivityMode edge  IN  ///< The mode of GPIO Edge Sensitivity
);

